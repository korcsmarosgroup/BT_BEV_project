cache_file = NULL,
resources = NULL,
organism = 9606,
fields = NULL,
default_fields = TRUE,
references_by_resource = TRUE
)
write_tsv(pathway_extra_interactions, '~/Desktop/lpathway_extra_interactions_OP.tsv')
View(all_genes_dea)
View(all_genes_dea)
View(all_genes_dea)
View(all_genes_dea_stat)
View(pathways_zscore)
View(pathways_zscore)
View(pathways_inputCarnival)
library(OmnipathR)
library(tidyverse)
library(mlrMBO)
library(parallelMap)
library(tibble)
library(dplyr)
library(readr)
library(progeny)
library(dorothea)
library(CARNIVAL)
library(ggplot2)
library(biomaRt)
library(grid)
library(gridExtra)
interactionFormatTransf <- function(InputDf, InteractionType){
OutputInt <- tibble(from = character(), to = character(),
source = character(), database = character())
n <- nrow(InputDf)
sources <- dplyr::pull(InputDf, sources)
sourceNodes <- dplyr::pull(InputDf, from)
targetNodes <- dplyr::pull(InputDf, to)
for (i in seq(n)){
currentSources <- unlist(strsplit(sources[i],";"))
for (j in seq(length(currentSources))){
OutputInt <- add_row(OutputInt,
from = sourceNodes[i] ,
to = targetNodes[i],
# source = paste(currentSources[j], InteractionType, sep="_"),
source = currentSources[j],
database = currentSources[j])
}
}
return(OutputInt)
}
lr_Interactions_Omnipath <- import_ligrecextra_interactions() %>%
dplyr::select(source_genesymbol,target_genesymbol,sources) %>%
dplyr::rename(from=source_genesymbol, to=target_genesymbol) %>%
dplyr::filter(from != to) %>%
dplyr::distinct()
## We import Omnipath Inter cellular annotations
InterCell_Annotations <- import_omnipath_intercell()
## We filter those proteins which are mainly annotated as receptor or ligand
Ligands_Receptors <- InterCell_Annotations %>%
dplyr::filter(category %in% c("receptor","ligand"))
## There are also some complexes. We are going to deal with them by including
## each of its individual proteins in our list
Ligand_Receptors_class <- character()
Ligand_Receptors_name <- character()
for (i in seq(nrow(Ligands_Receptors))){
if (Ligands_Receptors$entity_type[i] == "complex"){
Genescomplex <-unlist(strsplit(gsub("COMPLEX:", "",
Ligands_Receptors$genesymbol[i]),"_"))
class <- rep(Ligands_Receptors$category[i],length(Genescomplex))
Ligand_Receptors_name <- c(Ligand_Receptors_name,Genescomplex)
Ligand_Receptors_class <- c(Ligand_Receptors_class,class)
} else {
Ligand_Receptors_name <-
c(Ligand_Receptors_name, Ligands_Receptors$genesymbol[i])
Ligand_Receptors_class <-
c(Ligand_Receptors_class, Ligands_Receptors$category[i])
}
}
## We create a vector with all the ligands and another with all the receptors.
Ligand_Receptors_df <- data.frame(GeneSymbol = Ligand_Receptors_name,
Class = Ligand_Receptors_class, stringsAsFactors = FALSE) %>%
dplyr::distinct()
AllLigands_vec <-
dplyr::filter(Ligand_Receptors_df, Class == "ligand") %>%
dplyr::pull(GeneSymbol)
AllReceptors_vec <-
dplyr::filter(Ligand_Receptors_df, Class == "receptor") %>%
dplyr::pull(GeneSymbol)
## We next get protein-protein interactions from the different datasets availabe
## in Omnipath
AllInteractions <-
import_post_translational_interactions(exclude = "ligrecextra") %>%
dplyr::select(source_genesymbol, target_genesymbol, sources) %>%
dplyr::rename(from=source_genesymbol, to=target_genesymbol) %>%
dplyr::filter(from != to) %>%
dplyr::distinct()
## I finally match interactions and annotations.
Matching_Interactions_Annotations <- AllInteractions %>%
dplyr::filter(from %in% AllLigands_vec) %>%
dplyr::filter(to %in% AllReceptors_vec) %>%
dplyr::distinct()
##We now combine these two soruces of ligand receptor interactions and then transform to the network format required by the NicheNet method:
## We access to the Omnipath webservice usign the OmnipathR package and we
## set the number of sources reporting an interactions as its weight
lr_Network_Omnipath <-
bind_rows(lr_Interactions_Omnipath, Matching_Interactions_Annotations) %>%
dplyr::distinct() %>%
interactionFormatTransf(InteractionType="LigrecExtra") %>%
dplyr::distinct()
## I have to remove self-interactions
lr_Network_Omnipath <- lr_Network_Omnipath %>%
dplyr::filter(from != to)
## I also have to remove interactions going to ligands. See Methods Nichenet
## paper
ligands <- unique(dplyr::pull(lr_Network_Omnipath, from))
lr_Network_Omnipath <- lr_Network_Omnipath %>%
dplyr::filter(!(to %in% ligands))
## There are in addition some records containing not input gene, we remove them
## since they are giving problems with running the model.
lr_Network_Omnipath <- lr_Network_Omnipath %>%
dplyr::filter(from != "") %>%
dplyr::filter(to != "")
nrow(lr_Network_Omnipath)
saveRDS(lr_Network_Omnipath,
"~/Desktop/lr_Network_Omnipath.rds")
write_tsv(lr_Network_Omnipath, '~/Desktop/lr_Network_Omnipath.tsv')
OutputCyto <- function(CarnivalResults, outputFile) {
CarnivalNetwork <-
as.data.frame(CarnivalResults$weightedSIF, stringsAsFactors = FALSE) %>%
dplyr::mutate(Sign = as.numeric(Sign), Weight = as.numeric(Weight)) %>%
dplyr::mutate(Weight = Sign * Weight) %>%
dplyr::select(Node1, Weight, Node2)
CarnivalNetworkNodes <-
unique(c(CarnivalNetwork$Node1,CarnivalNetwork$Node2))
CarnivalAttributes <- CarnivalResults$nodesAttributes %>%
as.data.frame() %>%
dplyr::filter(Node %in% CarnivalNetworkNodes) %>%
dplyr::mutate(NodeType = as.character(NodeType)) %>%
dplyr::mutate(NodeType=if_else(NodeType =="", "I", NodeType))
nameOutputNetwork <- paste0(outputFile, "Network.sif")
nameOutputAttributes <-  paste0(outputFile, "Attributes.txt")
write.table(CarnivalNetwork, file = nameOutputNetwork,
quote = FALSE, row.names = FALSE, col.names = FALSE, sep = " ")
write.table(CarnivalAttributes, file = nameOutputAttributes,
quote = FALSE, row.names = FALSE, col.names = TRUE, sep = "\t")
}
all_genes_dea <- read_csv('/Users/lgul/Documents/OneDrive_Norwich_BioScience_Institutes/COVID_stream4/CARNIVAL_network/macrophage_H_I_degs.csv')
all_genes_dea_stat <- all_genes_dea %>%
dplyr::select(gene, log2fc) %>%
dplyr::filter(!is.na(log2fc)) %>%
column_to_rownames(var = "gene")
pathways_zscore <- t(progeny(as.matrix(all_genes_dea_stat),
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = TRUE))
colnames(pathways_zscore) <- "NES"
## I also need to run progeny in such a way to have values between 1 and -1 to
## use as CARNIVAL input
pathways_inputCarnival <-
t(progeny(as.matrix(all_genes_dea_stat),
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = FALSE))
colnames(pathways_inputCarnival) <- "Activity"
##We now display the normalized enrichment scores (NES) in a bar plot.
pathways_zscore_df <- as.data.frame(pathways_zscore) %>%
rownames_to_column(var = "Pathway") %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Pathway = factor(Pathway))
ggplot(pathways_zscore_df,aes(x = reorder(Pathway, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Pathways")
weight_matrix <- getModel("Human", top=100)
weight_matrix <- data.frame(names = row.names(weight_matrix),
row.names = NULL, weight_matrix)
plots <- progenyScatter(all_genes_dea_stat %>%
tibble::rownames_to_column(var = "GeneID"), weight_matrix)
grid.draw(plots[[1]]$MAPK)
grid.draw(plots[[1]]$JAK.STAT)
grid.draw(plots[[1]]$NFkB)
## We load Dorothea Regulons
data(dorothea_hs, package = "dorothea")
regulons <- dorothea_hs %>%
dplyr::filter(confidence %in% c("A", "B","C"))
tf_activities_stat_pleitropic <-
dorothea::run_viper(all_genes_dea_stat, regulons,
options =  list(minsize = 15, eset.filter = FALSE,
cores = 8, verbose = FALSE, nes = TRUE, pleiotropy= TRUE))
tf_activities_top25_pleitropic <- tf_activities_stat_pleitropic %>%
as.data.frame() %>%
rownames_to_column(var = "Tf") %>%
dplyr::rename(NES = "log2fc") %>%
dplyr::top_n(25, wt = abs(NES)) %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Tf = factor(Tf))
ggplot(tf_activities_top25_pleitropic,aes(x = reorder(Tf, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Transcription Factors")
#Import the network for OmniPath
ia_omnipath <- import_omnipath_interactions() %>% as_tibble()
ia_pwextra <- import_pathwayextra_interactions() %>% as_tibble()
ia_kinaseextra <- import_kinaseextra_interactions() %>% as_tibble()
## We bind the datasets
interactions <- as_tibble(
bind_rows(
ia_omnipath %>% mutate(type = 'ppi'),
ia_pwextra %>% mutate(type = 'ppi'),
ia_kinaseextra %>% mutate(type = 'ppi')))
signed_directed_interactions <-
dplyr::filter(interactions, consensus_direction==1) %>%
filter(consensus_stimulation == 1 | consensus_inhibition == 1) %>%
dplyr::mutate(sign = if_else(consensus_stimulation==1,1,-1))  %>%
dplyr::select(source_genesymbol, sign,  target_genesymbol) %>%
dplyr::rename(source ="source_genesymbol", target ="target_genesymbol")
carnival_pkn <- signed_directed_interactions %>%
dplyr::distinct(source, target, .keep_all = TRUE)
all_source_nodes <- unique(carnival_pkn$source)
all_target_nodes <- unique(carnival_pkn$target)
all_nodes_network <- unique(c(all_source_nodes,all_target_nodes))
host_viral_interactions_hgnc <- read_tsv(file = '~/Desktop/lr_Network_Omnipath.tsv')
host_viral_interactions_hgnc_filter <- host_viral_interactions_hgnc %>%
dplyr::filter(to %in% all_source_nodes) %>%
dplyr::select(from, to) %>%
dplyr::distinct() %>%
dplyr::mutate(sign = -1) %>%
dplyr::rename(source = "from", target = "to") %>%
dplyr::select(source, sign, target)
## Prior Knowledge Network
carnival_pkn_hostvirus <-
bind_rows(carnival_pkn, host_viral_interactions_hgnc_filter)
viral_proteins <- unique(host_viral_interactions_hgnc_filter$source)
viral_proteins_perturbation <-
data.frame(viral_proteins = viral_proteins, sign = 1) %>%
tibble::column_to_rownames(var = "viral_proteins") %>%
t() %>% as.data.frame()
tf_top50_pleitropic <- tf_activities_stat_pleitropic %>%
as.data.frame() %>%
rownames_to_column(var = "TF") %>%
dplyr::filter(TF %in% all_nodes_network) %>%
dplyr::rename(NES = "log2fc") %>%
#dplyr::top_n(50, wt = abs(NES)) %>%
dplyr::arrange(NES) %>%
tibble::column_to_rownames(var = "TF")  %>%
t() %>% as.data.frame()
progeny_weigths <- pathways_inputCarnival %>% t()
carnival_results_top50tf_pleitropic_minsize15 <-runCARNIVAL(
solverPath="/Applications/CPLEX_Studio128/cplex/bin/x86-64_osx/cplex",
netObj=carnival_pkn_hostvirus,
measObj=tf_top50_pleitropic,
inputObj = viral_proteins_perturbation,
# dir_name="Carnival_Results",
weightObj=progeny_weigths,
# nodeID = 'gene',
#timelimit = 7200,
timelimit = 600,
solver = "cplex")
saveRDS(carnival_results_top50tf_pleitropic_minsize15, file = "~/Desktop/carnival_results_alltf_pleitropic_minsize15.rds")
OutputCyto(carnival_results_top50tf_pleitropic_minsize15,outputFile="~/Desktop/carnival_results_alltf_pleitropic_minsize15")
all_genes_dea <- read_csv('/Users/lgul/Documents/OneDrive_Norwich_BioScience_Institutes/COVID_stream4/CARNIVAL_network/macrophage_H_I_degs.csv')
all_genes_dea_stat <- all_genes_dea %>%
dplyr::select(gene, log2fc) %>%
dplyr::filter(!is.na(log2fc)) %>%
column_to_rownames(var = "gene")
pathways_zscore <- t(progeny(as.matrix(all_genes_dea_stat),
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = TRUE))
colnames(pathways_zscore) <- "NES"
## I also need to run progeny in such a way to have values between 1 and -1 to
## use as CARNIVAL input
pathways_inputCarnival <-
t(progeny(as.matrix(all_genes_dea_stat),
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = FALSE))
colnames(pathways_inputCarnival) <- "Activity"
##We now display the normalized enrichment scores (NES) in a bar plot.
pathways_zscore_df <- as.data.frame(pathways_zscore) %>%
rownames_to_column(var = "Pathway") %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Pathway = factor(Pathway))
ggplot(pathways_zscore_df,aes(x = reorder(Pathway, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Pathways")
library(OmnipathR)
library(tidyverse)
library(mlrMBO)
library(parallelMap)
library(tibble)
library(dplyr)
library(readr)
library(progeny)
library(dorothea)
library(CARNIVAL)
library(ggplot2)
library(biomaRt)
library(grid)
library(gridExtra)
all_genes_dea <- read_csv('/Users/lgul/Documents/OneDrive_Norwich_BioScience_Institutes/COVID_stream4/CARNIVAL_network/macrophage_H_I_degs.csv')
all_genes_dea_stat <- all_genes_dea %>%
dplyr::select(gene, log2fc) %>%
dplyr::filter(!is.na(log2fc)) %>%
column_to_rownames(var = "gene")
pathways_zscore <- t(progeny(as.matrix(all_genes_dea_stat),
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = TRUE))
colnames(pathways_zscore) <- "NES"
## I also need to run progeny in such a way to have values between 1 and -1 to
## use as CARNIVAL input
pathways_inputCarnival <-
t(progeny(as.matrix(all_genes_dea_stat),
scale=TRUE, organism="Human", top = 100, perm = 10000, z_scores = FALSE))
colnames(pathways_inputCarnival) <- "Activity"
##We now display the normalized enrichment scores (NES) in a bar plot.
pathways_zscore_df <- as.data.frame(pathways_zscore) %>%
rownames_to_column(var = "Pathway") %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Pathway = factor(Pathway))
ggplot(pathways_zscore_df,aes(x = reorder(Pathway, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Pathways")
weight_matrix <- getModel("Human", top=100)
weight_matrix <- data.frame(names = row.names(weight_matrix),
row.names = NULL, weight_matrix)
plots <- progenyScatter(all_genes_dea_stat %>%
tibble::rownames_to_column(var = "GeneID"), weight_matrix)
grid.draw(plots[[1]]$MAPK)
grid.draw(plots[[1]]$JAK.STAT)
grid.draw(plots[[1]]$NFkB)
## We load Dorothea Regulons
data(dorothea_hs, package = "dorothea")
regulons <- dorothea_hs %>%
dplyr::filter(confidence %in% c("A", "B","C"))
## We run Viper using the statistic from the different expression analysis.
## First, we run it considering TF with at least 5 targets and with no correction for pleiotropic regulation
all_genes_dea_stat <-  all_genes_dea %>%
dplyr::select(gene, log2fc) %>%
dplyr::filter(!is.na(log2fc)) %>%
column_to_rownames(var = "gene") %>%
as.matrix()
tf_activities_stat <-
dorothea::run_viper(all_genes_dea_stat, regulons,
options =  list(minsize = 5, eset.filter = FALSE,
cores = 8, verbose = FALSE, nes = TRUE))
## We now display the top 25 normalized enrichment scores (NES) for the TF in a bar plot.
tf_activities_top25 <- tf_activities_stat %>%
as.data.frame() %>%
rownames_to_column(var = "Tf") %>%
dplyr::rename(NES = "log2fc") %>%
dplyr::top_n(25, wt = abs(NES)) %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Tf = factor(Tf))
ggplot(tf_activities_top25,aes(x = reorder(Tf, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Transcription Factors")
## I run again Viper with a more conservative setup.
## The TFs need to regulate at least 15 targets genes and I include the correction for pleiotropic regulation
tf_activities_stat_pleitropic <-
dorothea::run_viper(all_genes_dea_stat, regulons,
options =  list(minsize = 15, eset.filter = FALSE,
cores = 8, verbose = FALSE, nes = TRUE, pleiotropy= TRUE))
tf_activities_top25_pleitropic <- tf_activities_stat_pleitropic %>%
as.data.frame() %>%
rownames_to_column(var = "Tf") %>%
dplyr::rename(NES = "log2fc") %>%
dplyr::top_n(25, wt = abs(NES)) %>%
dplyr::arrange(NES) %>%
dplyr::mutate(Tf = factor(Tf))
ggplot(tf_activities_top25_pleitropic,aes(x = reorder(Tf, NES), y = NES)) +
geom_bar(aes(fill = NES), stat = "identity") +
scale_fill_gradient2(low = "darkblue", high = "indianred",
mid = "whitesmoke", midpoint = 0) +
theme_minimal() +
theme(axis.title = element_text(face = "bold", size = 12),
axis.text.x =
element_text(angle = 45, hjust = 1, size =10, face= "bold"),
axis.text.y = element_text(size =10, face= "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
xlab("Transcription Factors")
#Import the network for OmniPath
ia_omnipath <- import_omnipath_interactions() %>% as_tibble()
ia_pwextra <- import_pathwayextra_interactions() %>% as_tibble()
ia_kinaseextra <- import_kinaseextra_interactions() %>% as_tibble()
## We bind the datasets
interactions <- as_tibble(
bind_rows(
ia_omnipath %>% mutate(type = 'ppi'),
ia_pwextra %>% mutate(type = 'ppi'),
ia_kinaseextra %>% mutate(type = 'ppi')))
signed_directed_interactions <-
dplyr::filter(interactions, consensus_direction==1) %>%
filter(consensus_stimulation == 1 | consensus_inhibition == 1) %>%
dplyr::mutate(sign = if_else(consensus_stimulation==1,1,-1))  %>%
dplyr::select(source_genesymbol, sign,  target_genesymbol) %>%
dplyr::rename(source ="source_genesymbol", target ="target_genesymbol")
carnival_pkn <- signed_directed_interactions %>%
dplyr::distinct(source, target, .keep_all = TRUE)
all_source_nodes <- unique(carnival_pkn$source)
all_target_nodes <- unique(carnival_pkn$target)
all_nodes_network <- unique(c(all_source_nodes,all_target_nodes))
host_viral_interactions_hgnc <- read_tsv(file = '/Users/lgul/Documents/OneDrive_Norwich_BioScience_Institutes/COVID_stream4/CARNIVAL_network/lr_Network_Omnipath_expressed_ligands.tsv')
host_viral_interactions_hgnc_filter <- host_viral_interactions_hgnc %>%
dplyr::filter(to %in% all_source_nodes) %>%
dplyr::select(from, to) %>%
dplyr::distinct() %>%
dplyr::mutate(sign = -1) %>%
dplyr::rename(source = "from", target = "to") %>%
dplyr::select(source, sign, target)
host_viral_interactions_hgnc <- read_tsv(file = '/Users/lgul/Documents/OneDrive_Norwich_BioScience_Institutes/COVID_stream4/CARNIVAL_network/lr_Network_Omnipath_expressed_ligands.tsv')
host_viral_interactions_hgnc_filter <- host_viral_interactions_hgnc %>%
dplyr::filter(to %in% all_source_nodes) %>%
dplyr::select(from, to) %>%
dplyr::distinct() %>%
dplyr::mutate(sign = -1) %>%
dplyr::rename(source = "from", target = "to") %>%
dplyr::select(source, sign, target)
carnival_pkn_hostvirus <-
bind_rows(carnival_pkn, host_viral_interactions_hgnc_filter)
## Perturbation (Viral proteins are active)
viral_proteins <- unique(host_viral_interactions_hgnc_filter$source)
viral_proteins_perturbation <-
data.frame(viral_proteins = viral_proteins, sign = 1) %>%
tibble::column_to_rownames(var = "viral_proteins") %>%
t() %>% as.data.frame()
## Top TFs
tf_top50_pleitropic <- tf_activities_stat_pleitropic %>%
as.data.frame() %>%
rownames_to_column(var = "TF") %>%
dplyr::filter(TF %in% all_nodes_network) %>%
dplyr::rename(NES = "log2fc") %>%
#dplyr::top_n(50, wt = abs(NES)) %>%
dplyr::arrange(NES) %>%
tibble::column_to_rownames(var = "TF")  %>%
t() %>% as.data.frame()
## Progeny Weigths
progeny_weigths <- pathways_inputCarnival %>% t()
carnival_results_top50tf_pleitropic_minsize15 <-runCARNIVAL(
solverPath="/Applications/CPLEX_Studio128/cplex/bin/x86-64_osx/cplex",
netObj=carnival_pkn_hostvirus,
measObj=tf_top50_pleitropic,
inputObj = viral_proteins_perturbation,
# dir_name="Carnival_Results",
weightObj=progeny_weigths,
# nodeID = 'gene',
#timelimit = 7200,
timelimit = 600,
solver = "cplex")
saveRDS(carnival_results_top50tf_pleitropic_minsize15, file = "~/Desktop/carnival_results_alltf_pleitropic_minsize15_v2.rds")
OutputCyto(carnival_results_top50tf_pleitropic_minsize15,outputFile="~/Desktop/carnival_results_alltf_pleitropic_minsize15_v2")
library(OmnipathR)
library(tidyverse)
TF_TG <- Import_TFregulon_Interactions(confidence_level = c('A','B','C'))
library(OmnipathR)
library(tidyverse)
TF_TG <- import_TFregulon_Interactions(confidence_level = c('A','B','C'))
library(OmnipathR)
library(tidyverse)
TF_TG <- import_TFregulons_Interactions(confidence_level = c('A','B','C'))
write_tsv(TF_TG, '~/Desktop/TF_TG_omnnipathR_ABC.tsv')
getwd()
setwd('/Users/lgul/Documents/OneDrive_Norwich_BioScience_Institutes/sc_data_analysis/BT_OMV/THP_1_analysis')
setwd('/Users/lgul/Documents/OneDrive_Norwich_BioScience_Institutes/sc_data_analysis/BT_OMV/THP_1_analysis/GEO157052')
data
data <- read.csv('GSE157052_RNAseq_countdata.txt', header = TRUE, sep = ",")
View(data)
rm(list = ls())
setwd('/Users/lgul/Documents/OneDrive_Norwich_BioScience_Institutes/sc_data_analysis/BT_OMV/THP_1_analysis/GEO157052')
raw_count <- read.csv('GSE157052_RNAseq_countdata.txt', header = TRUE, sep = ",")
raw_count
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
View(raw_count)
library(DESeq2)
conditions <- factor(c("THP1_0H", "THP1_0H_2", "THP1_0H_3"))
dds <- DESeqDataSetFromMatrix(countData = raw_count, colData = DataFrame(conditions) , design = ~ conditions)
